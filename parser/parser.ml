type token =
  | ID of (string)
  | TYPE
  | VAR
  | FUNCTION
  | BREAK
  | OF
  | END
  | IN
  | NIL
  | LET
  | DO
  | TO
  | FOR
  | WHILE
  | ELSE
  | THEN
  | IF
  | ARRAY
  | ASSIGN
  | OR
  | AND
  | GE
  | GT
  | LE
  | LT
  | NEQ
  | EQ
  | DIVIDE
  | TIMES
  | MINUS
  | PLUS
  | DOT
  | RBRACE
  | LBRACE
  | RBRACK
  | LBRACK
  | RPAREN
  | LPAREN
  | SEMICOLON
  | COLON
  | COMMA
  | EOF
  | INT of (int)
  | STRING of (string)

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
  open Ast
  module S = Symbol
  let getPos : unit -> Ast.pos = Parsing.symbol_start
# 54 "parser.ml"
let yytransl_const = [|
  258 (* TYPE *);
  259 (* VAR *);
  260 (* FUNCTION *);
  261 (* BREAK *);
  262 (* OF *);
  263 (* END *);
  264 (* IN *);
  265 (* NIL *);
  266 (* LET *);
  267 (* DO *);
  268 (* TO *);
  269 (* FOR *);
  270 (* WHILE *);
  271 (* ELSE *);
  272 (* THEN *);
  273 (* IF *);
  274 (* ARRAY *);
  275 (* ASSIGN *);
  276 (* OR *);
  277 (* AND *);
  278 (* GE *);
  279 (* GT *);
  280 (* LE *);
  281 (* LT *);
  282 (* NEQ *);
  283 (* EQ *);
  284 (* DIVIDE *);
  285 (* TIMES *);
  286 (* MINUS *);
  287 (* PLUS *);
  288 (* DOT *);
  289 (* RBRACE *);
  290 (* LBRACE *);
  291 (* RBRACK *);
  292 (* LBRACK *);
  293 (* RPAREN *);
  294 (* LPAREN *);
  295 (* SEMICOLON *);
  296 (* COLON *);
  297 (* COMMA *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* ID *);
  298 (* INT *);
  299 (* STRING *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\016\000\003\000\003\000\003\000\005\000\017\000\017\000\
\006\000\018\000\018\000\018\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\008\000\019\000\019\000\020\000\020\000\009\000\010\000\011\000\
\012\000\013\000\014\000\015\000\004\000\004\000\022\000\022\000\
\022\000\023\000\023\000\026\000\027\000\027\000\027\000\028\000\
\028\000\029\000\029\000\030\000\024\000\024\000\025\000\025\000\
\031\000\031\000\021\000\021\000\021\000\000\000"

let yylen = "\002\000\
\002\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\003\000\004\000\003\000\003\000\003\000\
\004\000\000\000\001\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\004\000\001\000\003\000\000\000\003\000\006\000\003\000\006\000\
\004\000\004\000\008\000\005\000\002\000\000\000\001\000\001\000\
\001\000\001\000\002\000\004\000\001\000\003\000\003\000\000\000\
\001\000\003\000\001\000\003\000\004\000\006\000\001\000\002\000\
\007\000\009\000\001\000\001\000\000\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\018\000\016\000\003\000\054\000\000\000\000\000\
\000\000\000\000\005\000\006\000\078\000\000\000\000\000\004\000\
\007\000\008\000\009\000\010\000\011\000\012\000\013\000\014\000\
\015\000\017\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\053\000\055\000\056\000\057\000\000\000\000\000\000\000\000\000\
\000\000\000\000\022\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\032\000\031\000\000\000\000\000\
\000\000\020\000\000\000\000\000\000\000\042\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\059\000\
\072\000\000\000\000\000\000\000\000\000\000\000\021\000\000\000\
\041\000\000\000\000\000\000\000\025\000\000\000\000\000\000\000\
\000\000\052\000\000\000\000\000\000\000\043\000\000\000\028\000\
\000\000\000\000\061\000\060\000\000\000\000\000\000\000\000\000\
\000\000\067\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\063\000\062\000\000\000\068\000\
\000\000\000\000\066\000\000\000\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\013\000\088\000\015\000\028\000\016\000\017\000\018\000\019\000\
\020\000\021\000\022\000\023\000\024\000\025\000\026\000\027\000\
\033\000\089\000\085\000\086\000\095\000\057\000\058\000\059\000\
\060\000\061\000\124\000\128\000\129\000\130\000\062\000"

let yysindex = "\010\000\
\018\255\000\000\000\000\000\000\000\000\000\000\019\255\018\255\
\018\255\018\255\000\000\000\000\000\000\101\002\249\254\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\102\255\095\255\007\255\156\255\143\002\194\255\
\029\255\018\255\018\255\018\255\018\255\018\255\018\255\018\255\
\018\255\018\255\018\255\018\255\018\255\000\000\018\255\019\255\
\018\255\019\255\018\255\018\255\019\255\019\255\019\255\018\255\
\000\000\000\000\000\000\000\000\037\255\050\255\018\255\018\255\
\018\255\018\255\000\000\018\255\162\000\162\000\127\255\127\255\
\127\255\127\255\127\255\127\255\000\000\000\000\233\254\233\254\
\187\002\000\000\155\002\031\255\225\254\000\000\171\002\065\255\
\025\255\040\255\240\254\042\255\194\255\039\255\103\255\000\000\
\000\000\222\255\187\002\127\002\187\002\187\002\000\000\018\255\
\000\000\019\255\096\255\018\255\000\000\003\255\018\255\019\255\
\019\255\000\000\018\255\018\255\187\002\000\000\018\255\000\000\
\098\255\019\255\000\000\000\000\187\002\092\255\077\255\081\255\
\084\255\000\000\182\255\187\002\187\002\019\255\089\255\018\255\
\019\255\229\254\019\255\018\255\000\000\000\000\187\002\000\000\
\018\255\019\255\000\000\187\002\187\002\099\255\018\255\187\002"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\041\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\230\254\000\000\106\255\000\000\000\000\000\000\138\255\
\000\000\000\000\000\000\000\000\097\255\067\255\000\000\000\000\
\000\000\000\000\000\000\000\000\161\000\201\000\241\000\035\001\
\075\001\115\001\155\001\195\001\000\000\000\000\081\000\121\000\
\210\001\000\000\000\000\000\000\000\000\000\000\000\000\109\255\
\000\000\000\000\000\000\000\000\140\255\142\255\000\000\000\000\
\000\000\000\000\250\001\104\002\001\255\026\255\000\000\000\000\
\000\000\230\254\000\000\106\255\000\000\000\000\000\000\000\000\
\113\255\000\000\000\000\000\000\237\254\000\000\000\000\000\000\
\000\000\119\255\000\000\000\000\105\255\000\000\000\000\000\000\
\253\254\000\000\000\000\009\002\049\002\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\112\255\000\000\
\000\000\000\000\000\000\064\002\126\255\000\000\000\000\129\255"

let yygindex = "\000\000\
\000\000\008\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\029\000\
\098\000\052\000\000\000\056\000\000\000\000\000\103\000\000\000\
\107\000\000\000\000\000\043\000\000\000\031\000\000\000"

let yytablesize = 986
let yytable = "\145\000\
\019\000\105\000\111\000\003\000\042\000\043\000\044\000\024\000\
\014\000\106\000\001\000\047\000\146\000\045\000\044\000\030\000\
\031\000\032\000\003\000\003\000\121\000\045\000\004\000\112\000\
\048\000\063\000\005\000\006\000\049\000\065\000\007\000\008\000\
\023\000\065\000\009\000\029\000\122\000\024\000\053\000\024\000\
\002\000\069\000\070\000\071\000\072\000\073\000\074\000\075\000\
\076\000\077\000\078\000\079\000\080\000\055\000\081\000\010\000\
\083\000\104\000\087\000\011\000\012\000\109\000\023\000\093\000\
\023\000\067\000\110\000\068\000\071\000\071\000\098\000\099\000\
\100\000\101\000\071\000\102\000\082\000\068\000\084\000\113\000\
\030\000\090\000\091\000\092\000\034\000\035\000\036\000\037\000\
\038\000\039\000\040\000\041\000\042\000\043\000\044\000\045\000\
\053\000\054\000\055\000\058\000\058\000\119\000\056\000\134\000\
\058\000\108\000\069\000\069\000\069\000\114\000\136\000\117\000\
\069\000\070\000\070\000\070\000\137\000\138\000\125\000\070\000\
\029\000\142\000\131\000\132\000\139\000\151\000\133\000\073\000\
\073\000\073\000\074\000\074\000\074\000\073\000\084\000\050\000\
\074\000\051\000\123\000\052\000\126\000\127\000\026\000\143\000\
\077\000\027\000\076\000\148\000\075\000\064\000\127\000\064\000\
\149\000\094\000\042\000\043\000\044\000\045\000\152\000\120\000\
\040\000\118\000\141\000\096\000\135\000\144\000\064\000\127\000\
\097\000\147\000\000\000\000\000\000\000\000\000\150\000\034\000\
\035\000\036\000\037\000\038\000\039\000\040\000\041\000\042\000\
\043\000\044\000\045\000\000\000\000\000\000\000\000\000\000\000\
\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\039\000\034\000\035\000\036\000\037\000\038\000\039\000\040\000\
\041\000\042\000\043\000\044\000\045\000\034\000\035\000\036\000\
\037\000\038\000\039\000\040\000\041\000\042\000\043\000\044\000\
\045\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\066\000\115\000\000\000\000\000\000\000\000\000\000\000\000\000\
\038\000\034\000\035\000\036\000\037\000\038\000\039\000\040\000\
\041\000\042\000\043\000\044\000\045\000\000\000\000\000\000\000\
\000\000\000\000\019\000\019\000\019\000\000\000\000\000\019\000\
\019\000\000\000\000\000\019\000\019\000\000\000\000\000\019\000\
\019\000\000\000\000\000\019\000\019\000\019\000\019\000\019\000\
\019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
\019\000\019\000\037\000\019\000\000\000\019\000\000\000\019\000\
\000\000\019\000\002\000\002\000\002\000\000\000\000\000\002\000\
\002\000\000\000\000\000\002\000\002\000\000\000\000\000\002\000\
\002\000\000\000\000\000\000\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\000\000\002\000\036\000\002\000\000\000\002\000\000\000\002\000\
\000\000\002\000\030\000\030\000\030\000\000\000\000\000\030\000\
\030\000\000\000\000\000\030\000\030\000\000\000\000\000\030\000\
\030\000\000\000\000\000\000\000\030\000\030\000\030\000\030\000\
\030\000\030\000\030\000\030\000\000\000\000\000\030\000\030\000\
\000\000\030\000\035\000\030\000\000\000\030\000\000\000\030\000\
\000\000\030\000\029\000\029\000\029\000\000\000\000\000\029\000\
\029\000\000\000\000\000\029\000\029\000\000\000\000\000\029\000\
\029\000\000\000\000\000\000\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\000\000\000\000\029\000\029\000\
\000\000\029\000\034\000\029\000\000\000\029\000\000\000\029\000\
\000\000\029\000\040\000\040\000\040\000\000\000\000\000\040\000\
\040\000\000\000\000\000\040\000\040\000\000\000\000\000\040\000\
\040\000\000\000\000\000\000\000\040\000\040\000\000\000\036\000\
\037\000\038\000\039\000\040\000\041\000\042\000\043\000\044\000\
\045\000\040\000\033\000\040\000\000\000\040\000\000\000\040\000\
\000\000\040\000\039\000\039\000\039\000\000\000\000\000\039\000\
\039\000\047\000\000\000\039\000\039\000\000\000\000\000\039\000\
\039\000\000\000\000\000\000\000\039\000\039\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\039\000\000\000\039\000\000\000\039\000\000\000\039\000\
\000\000\039\000\038\000\038\000\038\000\000\000\000\000\038\000\
\038\000\050\000\000\000\038\000\038\000\000\000\000\000\038\000\
\038\000\000\000\000\000\000\000\038\000\038\000\000\000\000\000\
\048\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\038\000\000\000\038\000\000\000\038\000\000\000\038\000\
\000\000\038\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\037\000\037\000\037\000\000\000\
\000\000\037\000\037\000\000\000\000\000\037\000\037\000\000\000\
\046\000\037\000\037\000\000\000\000\000\000\000\037\000\037\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\051\000\
\000\000\000\000\000\000\037\000\000\000\037\000\000\000\037\000\
\000\000\037\000\000\000\037\000\036\000\036\000\036\000\000\000\
\000\000\036\000\036\000\000\000\000\000\036\000\036\000\000\000\
\000\000\036\000\036\000\000\000\000\000\000\000\036\000\036\000\
\000\000\000\000\000\000\000\000\046\000\000\000\000\000\049\000\
\000\000\000\000\000\000\036\000\000\000\036\000\000\000\036\000\
\000\000\036\000\000\000\036\000\035\000\035\000\035\000\000\000\
\000\000\035\000\035\000\000\000\000\000\035\000\035\000\000\000\
\000\000\035\000\035\000\000\000\000\000\000\000\035\000\035\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\035\000\000\000\035\000\000\000\035\000\
\000\000\035\000\000\000\035\000\034\000\034\000\034\000\000\000\
\000\000\034\000\034\000\000\000\000\000\034\000\034\000\000\000\
\000\000\034\000\034\000\000\000\000\000\000\000\034\000\034\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\034\000\000\000\034\000\000\000\034\000\
\000\000\034\000\000\000\034\000\033\000\033\000\033\000\000\000\
\000\000\033\000\033\000\000\000\000\000\033\000\033\000\000\000\
\000\000\033\000\033\000\047\000\047\000\047\000\033\000\033\000\
\047\000\047\000\000\000\000\000\047\000\047\000\000\000\000\000\
\047\000\047\000\000\000\033\000\000\000\033\000\000\000\033\000\
\000\000\033\000\000\000\033\000\000\000\000\000\000\000\000\000\
\000\000\000\000\047\000\000\000\047\000\000\000\047\000\000\000\
\047\000\000\000\047\000\050\000\050\000\050\000\000\000\000\000\
\050\000\050\000\000\000\000\000\050\000\050\000\000\000\000\000\
\050\000\050\000\048\000\048\000\048\000\000\000\000\000\048\000\
\048\000\000\000\000\000\048\000\048\000\000\000\000\000\048\000\
\048\000\000\000\050\000\000\000\050\000\000\000\050\000\000\000\
\050\000\000\000\050\000\000\000\000\000\000\000\000\000\000\000\
\000\000\048\000\000\000\048\000\000\000\048\000\000\000\048\000\
\000\000\048\000\046\000\046\000\046\000\000\000\000\000\046\000\
\046\000\000\000\000\000\046\000\046\000\000\000\000\000\046\000\
\046\000\051\000\051\000\051\000\000\000\000\000\051\000\051\000\
\000\000\000\000\051\000\051\000\000\000\000\000\051\000\051\000\
\000\000\046\000\000\000\046\000\000\000\046\000\000\000\046\000\
\000\000\046\000\000\000\000\000\000\000\000\000\000\000\000\000\
\051\000\000\000\051\000\000\000\051\000\000\000\051\000\000\000\
\051\000\049\000\049\000\049\000\000\000\000\000\049\000\049\000\
\000\000\000\000\049\000\049\000\000\000\000\000\000\000\049\000\
\034\000\035\000\036\000\037\000\038\000\039\000\040\000\041\000\
\042\000\043\000\044\000\045\000\000\000\000\000\000\000\000\000\
\049\000\000\000\049\000\000\000\049\000\116\000\049\000\000\000\
\049\000\000\000\034\000\035\000\036\000\037\000\038\000\039\000\
\040\000\041\000\042\000\043\000\044\000\045\000\065\000\000\000\
\000\000\000\000\034\000\035\000\036\000\037\000\038\000\039\000\
\040\000\041\000\042\000\043\000\044\000\045\000\034\000\035\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\
\044\000\045\000\000\000\000\000\000\000\103\000\034\000\035\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\
\044\000\045\000\000\000\000\000\000\000\107\000\034\000\035\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\
\044\000\045\000"

let yycheck = "\027\001\
\000\000\033\001\019\001\001\001\028\001\029\001\033\001\007\001\
\001\000\041\001\001\000\019\001\040\001\033\001\041\001\008\000\
\009\000\010\000\001\001\001\001\018\001\041\001\005\001\040\001\
\032\001\019\001\009\001\010\001\036\001\033\001\013\001\014\001\
\007\001\037\001\017\001\007\000\034\001\037\001\002\001\039\001\
\000\000\034\000\035\000\036\000\037\000\038\000\039\000\040\000\
\041\000\042\000\043\000\044\000\045\000\004\001\047\000\038\001\
\049\000\027\001\051\000\042\001\043\001\037\001\037\001\056\000\
\039\001\037\001\027\001\039\001\002\001\003\001\063\000\064\000\
\065\000\066\000\008\001\068\000\048\000\039\001\050\000\038\001\
\000\000\053\000\054\000\055\000\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\002\001\003\001\004\001\003\001\004\001\006\001\008\001\006\001\
\008\001\041\001\002\001\003\001\004\001\007\001\019\001\104\000\
\008\001\002\001\003\001\004\001\040\001\037\001\111\000\008\001\
\000\000\033\001\115\000\116\000\041\001\027\001\119\000\002\001\
\003\001\004\001\002\001\003\001\004\001\008\001\106\000\034\001\
\008\001\036\001\110\000\038\001\112\000\113\000\037\001\136\000\
\007\001\037\001\007\001\140\000\007\001\037\001\122\000\033\001\
\145\000\056\000\028\001\029\001\030\001\031\001\151\000\108\000\
\000\000\106\000\134\000\061\000\122\000\137\000\011\001\139\000\
\062\000\139\000\255\255\255\255\255\255\255\255\146\000\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\255\255\255\255\255\255\255\255\255\255\
\011\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\039\001\012\001\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\255\255\255\255\255\255\
\255\255\255\255\002\001\003\001\004\001\255\255\255\255\007\001\
\008\001\255\255\255\255\011\001\012\001\255\255\255\255\015\001\
\016\001\255\255\255\255\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\000\000\035\001\255\255\037\001\255\255\039\001\
\255\255\041\001\002\001\003\001\004\001\255\255\255\255\007\001\
\008\001\255\255\255\255\011\001\012\001\255\255\255\255\015\001\
\016\001\255\255\255\255\255\255\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\255\255\033\001\000\000\035\001\255\255\037\001\255\255\039\001\
\255\255\041\001\002\001\003\001\004\001\255\255\255\255\007\001\
\008\001\255\255\255\255\011\001\012\001\255\255\255\255\015\001\
\016\001\255\255\255\255\255\255\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\255\255\030\001\031\001\
\255\255\033\001\000\000\035\001\255\255\037\001\255\255\039\001\
\255\255\041\001\002\001\003\001\004\001\255\255\255\255\007\001\
\008\001\255\255\255\255\011\001\012\001\255\255\255\255\015\001\
\016\001\255\255\255\255\255\255\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\255\255\030\001\031\001\
\255\255\033\001\000\000\035\001\255\255\037\001\255\255\039\001\
\255\255\041\001\002\001\003\001\004\001\255\255\255\255\007\001\
\008\001\255\255\255\255\011\001\012\001\255\255\255\255\015\001\
\016\001\255\255\255\255\255\255\020\001\021\001\255\255\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\033\001\000\000\035\001\255\255\037\001\255\255\039\001\
\255\255\041\001\002\001\003\001\004\001\255\255\255\255\007\001\
\008\001\000\000\255\255\011\001\012\001\255\255\255\255\015\001\
\016\001\255\255\255\255\255\255\020\001\021\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\033\001\255\255\035\001\255\255\037\001\255\255\039\001\
\255\255\041\001\002\001\003\001\004\001\255\255\255\255\007\001\
\008\001\000\000\255\255\011\001\012\001\255\255\255\255\015\001\
\016\001\255\255\255\255\255\255\020\001\021\001\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\033\001\255\255\035\001\255\255\037\001\255\255\039\001\
\255\255\041\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\002\001\003\001\004\001\255\255\
\255\255\007\001\008\001\255\255\255\255\011\001\012\001\255\255\
\000\000\015\001\016\001\255\255\255\255\255\255\020\001\021\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
\255\255\255\255\255\255\033\001\255\255\035\001\255\255\037\001\
\255\255\039\001\255\255\041\001\002\001\003\001\004\001\255\255\
\255\255\007\001\008\001\255\255\255\255\011\001\012\001\255\255\
\255\255\015\001\016\001\255\255\255\255\255\255\020\001\021\001\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\000\000\
\255\255\255\255\255\255\033\001\255\255\035\001\255\255\037\001\
\255\255\039\001\255\255\041\001\002\001\003\001\004\001\255\255\
\255\255\007\001\008\001\255\255\255\255\011\001\012\001\255\255\
\255\255\015\001\016\001\255\255\255\255\255\255\020\001\021\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\033\001\255\255\035\001\255\255\037\001\
\255\255\039\001\255\255\041\001\002\001\003\001\004\001\255\255\
\255\255\007\001\008\001\255\255\255\255\011\001\012\001\255\255\
\255\255\015\001\016\001\255\255\255\255\255\255\020\001\021\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\033\001\255\255\035\001\255\255\037\001\
\255\255\039\001\255\255\041\001\002\001\003\001\004\001\255\255\
\255\255\007\001\008\001\255\255\255\255\011\001\012\001\255\255\
\255\255\015\001\016\001\002\001\003\001\004\001\020\001\021\001\
\007\001\008\001\255\255\255\255\011\001\012\001\255\255\255\255\
\015\001\016\001\255\255\033\001\255\255\035\001\255\255\037\001\
\255\255\039\001\255\255\041\001\255\255\255\255\255\255\255\255\
\255\255\255\255\033\001\255\255\035\001\255\255\037\001\255\255\
\039\001\255\255\041\001\002\001\003\001\004\001\255\255\255\255\
\007\001\008\001\255\255\255\255\011\001\012\001\255\255\255\255\
\015\001\016\001\002\001\003\001\004\001\255\255\255\255\007\001\
\008\001\255\255\255\255\011\001\012\001\255\255\255\255\015\001\
\016\001\255\255\033\001\255\255\035\001\255\255\037\001\255\255\
\039\001\255\255\041\001\255\255\255\255\255\255\255\255\255\255\
\255\255\033\001\255\255\035\001\255\255\037\001\255\255\039\001\
\255\255\041\001\002\001\003\001\004\001\255\255\255\255\007\001\
\008\001\255\255\255\255\011\001\012\001\255\255\255\255\015\001\
\016\001\002\001\003\001\004\001\255\255\255\255\007\001\008\001\
\255\255\255\255\011\001\012\001\255\255\255\255\015\001\016\001\
\255\255\033\001\255\255\035\001\255\255\037\001\255\255\039\001\
\255\255\041\001\255\255\255\255\255\255\255\255\255\255\255\255\
\033\001\255\255\035\001\255\255\037\001\255\255\039\001\255\255\
\041\001\002\001\003\001\004\001\255\255\255\255\007\001\008\001\
\255\255\255\255\011\001\012\001\255\255\255\255\255\255\016\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\255\255\255\255\255\255\255\255\
\033\001\255\255\035\001\255\255\037\001\015\001\039\001\255\255\
\041\001\255\255\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\016\001\255\255\
\255\255\255\255\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\255\255\255\255\255\255\035\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\255\255\255\255\255\255\035\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001"

let yynames_const = "\
  TYPE\000\
  VAR\000\
  FUNCTION\000\
  BREAK\000\
  OF\000\
  END\000\
  IN\000\
  NIL\000\
  LET\000\
  DO\000\
  TO\000\
  FOR\000\
  WHILE\000\
  ELSE\000\
  THEN\000\
  IF\000\
  ARRAY\000\
  ASSIGN\000\
  OR\000\
  AND\000\
  GE\000\
  GT\000\
  LE\000\
  LT\000\
  NEQ\000\
  EQ\000\
  DIVIDE\000\
  TIMES\000\
  MINUS\000\
  PLUS\000\
  DOT\000\
  RBRACE\000\
  LBRACE\000\
  RBRACK\000\
  LBRACK\000\
  RPAREN\000\
  LPAREN\000\
  SEMICOLON\000\
  COLON\000\
  COMMA\000\
  EOF\000\
  "

let yynames_block = "\
  ID\000\
  INT\000\
  STRING\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.exp) in
    Obj.repr(
# 67 "parser.mly"
        (_1)
# 514 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.var) in
    Obj.repr(
# 70 "parser.mly"
           ( VarExp(_1) )
# 521 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 71 "parser.mly"
        ( NilExp )
# 527 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Sequencing) in
    Obj.repr(
# 72 "parser.mly"
               (SeqExp(_1))
# 534 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 73 "parser.mly"
        (IntExp(_1))
# 541 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 74 "parser.mly"
           ( StringExp(_1, getPos()) )
# 548 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Funccall) in
    Obj.repr(
# 76 "parser.mly"
             ( _1 )
# 555 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'BinOpExp) in
    Obj.repr(
# 77 "parser.mly"
             ( _1 )
# 562 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'RecordCreation) in
    Obj.repr(
# 78 "parser.mly"
                   ( _1 )
# 569 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ArrayCreation) in
    Obj.repr(
# 79 "parser.mly"
                  ( _1 )
# 576 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Assignment) in
    Obj.repr(
# 80 "parser.mly"
               ( _1 )
# 583 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'IfThenElse) in
    Obj.repr(
# 81 "parser.mly"
               ( _1 )
# 590 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'IfThen) in
    Obj.repr(
# 82 "parser.mly"
           ( _1 )
# 597 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'While) in
    Obj.repr(
# 83 "parser.mly"
          ( _1 )
# 604 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'For) in
    Obj.repr(
# 84 "parser.mly"
        ( _1 )
# 611 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 85 "parser.mly"
          ( BreakExp (getPos()) )
# 617 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Let) in
    Obj.repr(
# 86 "parser.mly"
        ( _1 )
# 624 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 89 "parser.mly"
        ( S.symbol _1 )
# 631 "parser.ml"
               : 'id))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'id) in
    Obj.repr(
# 92 "parser.mly"
       ( SimpleVar(_1, getPos()) )
# 638 "parser.ml"
               : Ast.var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.var) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'id) in
    Obj.repr(
# 93 "parser.mly"
                  ( FieldVar(_1, _3, getPos()) )
# 646 "parser.ml"
               : Ast.var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Ast.var) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Ast.exp) in
    Obj.repr(
# 94 "parser.mly"
                             ( SubscriptVar(_1, _3, getPos()) )
# 654 "parser.ml"
               : Ast.var))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expList) in
    Obj.repr(
# 97 "parser.mly"
                          (_2)
# 661 "parser.ml"
               : 'Sequencing))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expList) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 100 "parser.mly"
                          ( _1 @ [(_3, getPos())] )
# 669 "parser.ml"
               : 'expList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 101 "parser.mly"
                      ( (_1, getPos()) :: [(_3, getPos())] )
# 677 "parser.ml"
               : 'expList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'id) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'parameters) in
    Obj.repr(
# 104 "parser.mly"
                                ( CallExp{func = _1; args = _3; pos = getPos() })
# 685 "parser.ml"
               : 'Funccall))
; (fun __caml_parser_env ->
    Obj.repr(
# 107 "parser.mly"
    ( [] )
# 691 "parser.ml"
               : 'parameters))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 108 "parser.mly"
        ([_1] )
# 698 "parser.ml"
               : 'parameters))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'parameters) in
    Obj.repr(
# 109 "parser.mly"
                         ( _1::_3 )
# 706 "parser.ml"
               : 'parameters))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 112 "parser.mly"
                 ( OpExp {left = _1; oper = PlusOp; right = _3; pos = getPos() } )
# 714 "parser.ml"
               : 'BinOpExp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 113 "parser.mly"
                  ( OpExp {left = _1; oper = MinusOp; right = _3; pos = getPos() } )
# 722 "parser.ml"
               : 'BinOpExp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 114 "parser.mly"
                  ( OpExp {left = _1; oper = TimesOp; right = _3; pos = getPos() } )
# 730 "parser.ml"
               : 'BinOpExp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 115 "parser.mly"
                   (OpExp {left = _1; oper = DivideOp; right = _3; pos = getPos() })
# 738 "parser.ml"
               : 'BinOpExp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 116 "parser.mly"
               ( OpExp {left = _1; oper = EqOp; right = _3; pos = getPos() } )
# 746 "parser.ml"
               : 'BinOpExp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 117 "parser.mly"
                ( OpExp {left = _1; oper = NeqOp; right = _3; pos = getPos() } )
# 754 "parser.ml"
               : 'BinOpExp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 118 "parser.mly"
               ( OpExp {left = _1; oper = LtOp; right = _3; pos = getPos() } )
# 762 "parser.ml"
               : 'BinOpExp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 119 "parser.mly"
               ( OpExp {left = _1; oper = LeOp; right = _3; pos = getPos() } )
# 770 "parser.ml"
               : 'BinOpExp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 120 "parser.mly"
               ( OpExp {left = _1; oper = GtOp; right = _3; pos = getPos() } )
# 778 "parser.ml"
               : 'BinOpExp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 121 "parser.mly"
               ( OpExp {left = _1; oper = GeOp; right = _3; pos = getPos() } )
# 786 "parser.ml"
               : 'BinOpExp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 122 "parser.mly"
                ( IfExp {test = _1; then' = _3; else' = Some(IntExp(0)); pos = getPos() } )
# 794 "parser.ml"
               : 'BinOpExp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 123 "parser.mly"
               ( IfExp {test = _1; then' = IntExp(1); else' = Some(_3); pos = getPos() } )
# 802 "parser.ml"
               : 'BinOpExp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'id) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'recordExpList) in
    Obj.repr(
# 126 "parser.mly"
                                   ( RecordExp {fields = _3; typ = _1; pos = getPos() } )
# 810 "parser.ml"
               : 'RecordCreation))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'recordExpField) in
    Obj.repr(
# 129 "parser.mly"
                   ( _1 )
# 817 "parser.ml"
               : 'recordExpList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'recordExpList) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'recordExpField) in
    Obj.repr(
# 130 "parser.mly"
                                       (_1 @ _3)
# 825 "parser.ml"
               : 'recordExpList))
; (fun __caml_parser_env ->
    Obj.repr(
# 133 "parser.mly"
    ([])
# 831 "parser.ml"
               : 'recordExpField))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'id) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 134 "parser.mly"
              ( [(_1, _3, getPos())] )
# 839 "parser.ml"
               : 'recordExpField))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'id) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Ast.exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 137 "parser.mly"
                                ( ArrayExp {typ = _1; size = _3; init = _6; pos = getPos()} )
# 848 "parser.ml"
               : 'ArrayCreation))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.var) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 140 "parser.mly"
                      ( AssignExp {var = _1; exp = _3; pos = getPos()} )
# 856 "parser.ml"
               : 'Assignment))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Ast.exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 143 "parser.mly"
                             ( IfExp {test = _2; then' = _4; else' = Some _6; pos = getPos()})
# 865 "parser.ml"
               : 'IfThenElse))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 146 "parser.mly"
                    (IfExp {test = _2; then' = _4; else' = None; pos = getPos()})
# 873 "parser.ml"
               : 'IfThen))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 149 "parser.mly"
                     ( WhileExp {test = _2; body = _4; pos = getPos()} )
# 881 "parser.ml"
               : 'While))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'id) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : Ast.exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 152 "parser.mly"
                                    ( ForExp {var = _2; escape = ref true; lo = _4; hi = _6; body = _8; pos = getPos()} )
# 891 "parser.ml"
               : 'For))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Ast.dec list) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expseq) in
    Obj.repr(
# 155 "parser.mly"
                           ( LetExp { decs = _2; body = _4; pos = getPos() } )
# 899 "parser.ml"
               : 'Let))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.dec list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'dec) in
    Obj.repr(
# 158 "parser.mly"
             ( _1 @ _2 )
# 907 "parser.ml"
               : Ast.dec list))
; (fun __caml_parser_env ->
    Obj.repr(
# 159 "parser.mly"
     ( [] )
# 913 "parser.ml"
               : Ast.dec list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tydecs) in
    Obj.repr(
# 162 "parser.mly"
           ( _1 )
# 920 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'vardec) in
    Obj.repr(
# 163 "parser.mly"
           ( _1 )
# 927 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fundecs) in
    Obj.repr(
# 164 "parser.mly"
            ( FunctionDec(_1) )
# 934 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tydec) in
    Obj.repr(
# 167 "parser.mly"
          ( [_1] )
# 941 "parser.ml"
               : 'tydecs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'tydec) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tydecs) in
    Obj.repr(
# 168 "parser.mly"
                 ([_1] @ _2)
# 949 "parser.ml"
               : 'tydecs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'id) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'ty) in
    Obj.repr(
# 171 "parser.mly"
                  ( TypeDec {name = _2; ty = _4; pos = getPos()} )
# 957 "parser.ml"
               : 'tydec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'id) in
    Obj.repr(
# 174 "parser.mly"
       ( NameTy (_1, getPos()) )
# 964 "parser.ml"
               : 'ty))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tyfields) in
    Obj.repr(
# 175 "parser.mly"
                           ( RecordTy(_2) )
# 971 "parser.ml"
               : 'ty))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'id) in
    Obj.repr(
# 176 "parser.mly"
                ( ArrayTy(_3, getPos()) )
# 978 "parser.ml"
               : 'ty))
; (fun __caml_parser_env ->
    Obj.repr(
# 179 "parser.mly"
    ( [] )
# 984 "parser.ml"
               : 'tyfields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tyfieldlist) in
    Obj.repr(
# 180 "parser.mly"
                ( _1 )
# 991 "parser.ml"
               : 'tyfields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tyfieldlist) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tyfield) in
    Obj.repr(
# 183 "parser.mly"
                              ( _1 @ [_3] )
# 999 "parser.ml"
               : 'tyfieldlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tyfield) in
    Obj.repr(
# 184 "parser.mly"
            ([_1])
# 1006 "parser.ml"
               : 'tyfieldlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'id) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'id) in
    Obj.repr(
# 187 "parser.mly"
                (field { name = _1; escape = ref true; typ = _3; pos = getPos() })
# 1014 "parser.ml"
               : 'tyfield))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'id) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 190 "parser.mly"
                      ( VarDec {name = _2; escape = ref true; typ = None; init = _4; pos = getPos()} )
# 1022 "parser.ml"
               : 'vardec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'id) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'id) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 191 "parser.mly"
                               ( VarDec {name = _2; escape = ref true; typ = Some((_4, getpos())); init = _6; pos = getPos() } )
# 1031 "parser.ml"
               : 'vardec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fundec) in
    Obj.repr(
# 194 "parser.mly"
           ( _1 :: [] )
# 1038 "parser.ml"
               : 'fundecs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'fundec) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fundecs) in
    Obj.repr(
# 195 "parser.mly"
                   ( _1 :: _2 )
# 1046 "parser.ml"
               : 'fundecs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'id) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'tyfields) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 198 "parser.mly"
                                              ( fundec {name = _2; params = _4; result = NONE; body = _7; pos = getPos() } )
# 1055 "parser.ml"
               : 'fundec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : 'id) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'tyfields) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'id) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 199 "parser.mly"
                                                       (fundec {name = _2; params = _4; result = Some _7; body = _9; pos = getPos() })
# 1065 "parser.ml"
               : 'fundec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expList) in
    Obj.repr(
# 203 "parser.mly"
            ( _1 )
# 1072 "parser.ml"
               : 'expseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 204 "parser.mly"
        ( [_1] )
# 1079 "parser.ml"
               : 'expseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 205 "parser.mly"
    ( [] )
# 1085 "parser.ml"
               : 'expseq))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.exp)
