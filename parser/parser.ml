type token =
  | ID of (string)
  | TYPE
  | VAR
  | FUNCTION
  | BREAK
  | OF
  | END
  | IN
  | NIL
  | LET
  | DO
  | TO
  | FOR
  | WHILE
  | ELSE
  | THEN
  | IF
  | ARRAY
  | ASSIGN
  | OR
  | AND
  | GE
  | GT
  | LE
  | LT
  | NEQ
  | EQ
  | DIVIDE
  | TIMES
  | MINUS
  | PLUS
  | DOT
  | RBRACE
  | LBRACE
  | RBRACK
  | LBRACK
  | RPAREN
  | LPAREN
  | SEMICOLON
  | COLON
  | COMMA
  | EOF
  | INT of (int)
  | STRING of (string)

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"

# 52 "parser.ml"
let yytransl_const = [|
  258 (* TYPE *);
  259 (* VAR *);
  260 (* FUNCTION *);
  261 (* BREAK *);
  262 (* OF *);
  263 (* END *);
  264 (* IN *);
  265 (* NIL *);
  266 (* LET *);
  267 (* DO *);
  268 (* TO *);
  269 (* FOR *);
  270 (* WHILE *);
  271 (* ELSE *);
  272 (* THEN *);
  273 (* IF *);
  274 (* ARRAY *);
  275 (* ASSIGN *);
  276 (* OR *);
  277 (* AND *);
  278 (* GE *);
  279 (* GT *);
  280 (* LE *);
  281 (* LT *);
  282 (* NEQ *);
  283 (* EQ *);
  284 (* DIVIDE *);
  285 (* TIMES *);
  286 (* MINUS *);
  287 (* PLUS *);
  288 (* DOT *);
  289 (* RBRACE *);
  290 (* LBRACE *);
  291 (* RBRACK *);
  292 (* LBRACK *);
  293 (* RPAREN *);
  294 (* LPAREN *);
  295 (* SEMICOLON *);
  296 (* COLON *);
  297 (* COMMA *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* ID *);
  298 (* INT *);
  299 (* STRING *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\002\000\002\000\002\000\003\000\015\000\015\000\
\004\000\016\000\016\000\016\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\006\000\017\000\017\000\018\000\018\000\007\000\008\000\009\000\
\010\000\011\000\012\000\013\000\019\000\019\000\021\000\021\000\
\021\000\022\000\025\000\025\000\025\000\026\000\026\000\027\000\
\027\000\028\000\023\000\023\000\024\000\024\000\020\000\020\000\
\020\000\014\000\000\000"

let yylen = "\002\000\
\001\000\001\000\001\000\001\000\001\000\002\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\003\000\004\000\003\000\003\000\003\000\
\004\000\000\000\001\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\004\000\001\000\003\000\000\000\003\000\006\000\003\000\006\000\
\004\000\004\000\008\000\005\000\002\000\000\000\001\000\001\000\
\001\000\004\000\001\000\003\000\003\000\000\000\001\000\003\000\
\001\000\003\000\004\000\006\000\007\000\009\000\001\000\001\000\
\000\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\016\000\002\000\054\000\000\000\000\000\
\000\000\000\000\000\000\004\000\005\000\000\000\000\000\003\000\
\007\000\008\000\009\000\010\000\011\000\012\000\013\000\014\000\
\015\000\017\000\018\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\042\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\053\000\055\000\
\056\000\057\000\000\000\000\000\000\000\074\000\000\000\022\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\032\000\031\000\000\000\000\000\000\000\020\000\000\000\
\000\000\041\000\000\000\000\000\000\000\025\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\021\000\000\000\043\000\000\000\028\000\000\000\000\000\
\000\000\000\000\052\000\000\000\000\000\000\000\059\000\000\000\
\000\000\058\000\000\000\000\000\000\000\000\000\000\000\065\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\061\000\060\000\000\000\066\000\000\000\000\000\064\000\
\000\000\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\057\000\015\000\016\000\017\000\018\000\019\000\020\000\021\000\
\022\000\023\000\024\000\025\000\026\000\027\000\037\000\058\000\
\054\000\055\000\031\000\100\000\063\000\064\000\065\000\066\000\
\122\000\126\000\127\000\128\000"

let yysindex = "\009\000\
\087\255\000\000\246\254\000\000\000\000\000\000\028\255\087\255\
\087\255\087\255\087\255\000\000\000\000\227\002\242\254\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\033\255\087\255\087\255\057\255\018\255\
\164\255\183\002\014\255\197\255\228\254\087\255\087\255\087\255\
\087\255\087\255\087\255\087\255\087\255\087\255\087\255\087\255\
\087\255\087\255\038\255\087\255\030\255\227\254\000\000\195\002\
\142\255\025\255\062\255\063\255\065\255\087\255\000\000\000\000\
\000\000\000\000\087\255\087\255\087\255\000\000\087\255\000\000\
\087\255\083\255\083\255\116\255\116\255\116\255\116\255\116\255\
\116\255\000\000\000\000\014\255\014\255\227\002\000\000\211\002\
\087\255\000\000\033\255\061\255\087\255\000\000\042\255\239\254\
\040\255\223\255\041\255\075\255\141\002\227\002\167\002\227\002\
\227\002\000\000\227\002\000\000\087\255\000\000\002\255\087\255\
\085\255\086\255\000\000\087\255\087\255\227\002\000\000\084\255\
\086\255\000\000\227\002\072\255\053\255\066\255\058\255\000\000\
\185\255\227\002\093\255\069\255\087\255\097\255\235\254\086\255\
\087\255\000\000\000\000\227\002\000\000\087\255\115\255\000\000\
\227\002\227\002\092\255\087\255\227\002"

let yyrindex = "\000\000\
\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\120\000\041\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\236\254\000\000\094\255\000\000\000\000\
\000\000\000\000\081\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\096\255\000\000\000\000\000\000\000\000\117\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\201\000\241\000\035\001\075\001\115\001\155\001\195\001\
\235\001\000\000\000\000\121\000\161\000\250\001\000\000\000\000\
\000\000\000\000\236\254\000\000\094\255\000\000\000\000\000\000\
\000\000\130\255\131\255\000\000\000\000\034\002\144\002\249\254\
\001\255\000\000\248\254\000\000\000\000\000\000\000\000\000\000\
\000\000\104\255\000\000\000\000\000\000\049\002\000\000\000\000\
\109\255\000\000\068\255\000\000\000\000\000\000\250\254\000\000\
\000\000\089\002\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\081\255\000\000\000\000\000\000\000\000\
\104\002\124\255\000\000\000\000\132\255"

let yygindex = "\000\000\
\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\087\000\057\000\
\000\000\060\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\031\000\000\000\017\000"

let yytablesize = 1026
let yytable = "\024\000\
\019\000\112\000\119\000\090\000\050\000\142\000\014\000\023\000\
\072\000\001\000\073\000\091\000\044\000\033\000\034\000\035\000\
\036\000\051\000\143\000\120\000\044\000\052\000\113\000\028\000\
\045\000\029\000\063\000\030\000\032\000\024\000\063\000\024\000\
\045\000\053\000\056\000\121\000\067\000\023\000\087\000\023\000\
\001\000\046\000\047\000\074\000\075\000\076\000\077\000\078\000\
\079\000\080\000\081\000\082\000\083\000\084\000\085\000\086\000\
\089\000\088\000\059\000\060\000\061\000\094\000\095\000\096\000\
\062\000\097\000\109\000\098\000\111\000\067\000\067\000\067\000\
\101\000\102\000\103\000\067\000\104\000\114\000\105\000\073\000\
\006\000\115\000\068\000\068\000\068\000\124\000\125\000\003\000\
\068\000\131\000\133\000\004\000\134\000\138\000\107\000\005\000\
\006\000\141\000\136\000\007\000\008\000\139\000\135\000\009\000\
\040\000\041\000\042\000\043\000\044\000\045\000\046\000\047\000\
\048\000\049\000\118\000\147\000\010\000\123\000\148\000\075\000\
\030\000\129\000\130\000\073\000\011\000\069\000\069\000\069\000\
\012\000\013\000\026\000\069\000\027\000\070\000\070\000\070\000\
\072\000\071\000\140\000\070\000\062\000\062\000\145\000\046\000\
\047\000\048\000\049\000\146\000\099\000\110\000\108\000\132\000\
\144\000\149\000\000\000\000\000\000\000\000\000\000\000\000\000\
\029\000\038\000\039\000\040\000\041\000\042\000\043\000\044\000\
\045\000\046\000\047\000\048\000\049\000\000\000\068\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\093\000\038\000\
\039\000\040\000\041\000\042\000\043\000\044\000\045\000\046\000\
\047\000\048\000\049\000\137\000\000\000\000\000\000\000\000\000\
\040\000\000\000\000\000\000\000\038\000\039\000\040\000\041\000\
\042\000\043\000\044\000\045\000\046\000\047\000\048\000\049\000\
\038\000\039\000\040\000\041\000\042\000\043\000\044\000\045\000\
\046\000\047\000\048\000\049\000\000\000\000\000\000\000\000\000\
\000\000\070\000\000\000\071\000\000\000\000\000\000\000\000\000\
\039\000\000\000\038\000\039\000\040\000\041\000\042\000\043\000\
\044\000\045\000\046\000\047\000\048\000\049\000\000\000\000\000\
\000\000\000\000\019\000\019\000\019\000\071\000\000\000\019\000\
\019\000\000\000\000\000\019\000\019\000\000\000\000\000\019\000\
\019\000\000\000\000\000\019\000\019\000\019\000\019\000\019\000\
\019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
\019\000\019\000\038\000\019\000\000\000\019\000\000\000\019\000\
\000\000\019\000\001\000\001\000\001\000\000\000\000\000\001\000\
\001\000\000\000\000\000\001\000\001\000\000\000\000\000\001\000\
\001\000\000\000\000\000\000\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\000\000\001\000\037\000\001\000\000\000\001\000\000\000\001\000\
\000\000\001\000\006\000\006\000\006\000\000\000\000\000\006\000\
\006\000\000\000\000\000\006\000\006\000\000\000\000\000\006\000\
\006\000\000\000\000\000\000\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\000\000\000\000\006\000\006\000\
\000\000\006\000\036\000\006\000\000\000\006\000\000\000\006\000\
\000\000\006\000\030\000\030\000\030\000\000\000\000\000\030\000\
\030\000\000\000\000\000\030\000\030\000\000\000\000\000\030\000\
\030\000\000\000\000\000\000\000\030\000\030\000\030\000\030\000\
\030\000\030\000\030\000\030\000\000\000\000\000\030\000\030\000\
\000\000\030\000\035\000\030\000\000\000\030\000\000\000\030\000\
\000\000\030\000\029\000\029\000\029\000\000\000\000\000\029\000\
\029\000\000\000\000\000\029\000\029\000\000\000\000\000\029\000\
\029\000\000\000\000\000\000\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\000\000\000\000\029\000\029\000\
\000\000\029\000\034\000\029\000\000\000\029\000\000\000\029\000\
\000\000\029\000\040\000\040\000\040\000\000\000\000\000\040\000\
\040\000\000\000\000\000\040\000\040\000\000\000\000\000\040\000\
\040\000\000\000\000\000\000\000\040\000\040\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\040\000\033\000\040\000\000\000\040\000\000\000\040\000\
\000\000\040\000\039\000\039\000\039\000\000\000\000\000\039\000\
\039\000\047\000\000\000\039\000\039\000\000\000\000\000\039\000\
\039\000\000\000\000\000\000\000\039\000\039\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\039\000\000\000\039\000\000\000\039\000\000\000\039\000\
\000\000\039\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\050\000\000\000\000\000\038\000\038\000\038\000\000\000\
\000\000\038\000\038\000\000\000\000\000\038\000\038\000\000\000\
\046\000\038\000\038\000\000\000\000\000\000\000\038\000\038\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\038\000\000\000\038\000\000\000\038\000\
\000\000\038\000\000\000\038\000\037\000\037\000\037\000\000\000\
\000\000\037\000\037\000\000\000\000\000\037\000\037\000\000\000\
\048\000\037\000\037\000\000\000\000\000\000\000\037\000\037\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\051\000\
\000\000\000\000\000\000\037\000\000\000\037\000\000\000\037\000\
\000\000\037\000\000\000\037\000\036\000\036\000\036\000\000\000\
\000\000\036\000\036\000\000\000\000\000\036\000\036\000\000\000\
\000\000\036\000\036\000\000\000\000\000\000\000\036\000\036\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\049\000\
\000\000\000\000\000\000\036\000\000\000\036\000\000\000\036\000\
\000\000\036\000\000\000\036\000\035\000\035\000\035\000\000\000\
\000\000\035\000\035\000\000\000\000\000\035\000\035\000\000\000\
\000\000\035\000\035\000\000\000\000\000\000\000\035\000\035\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\035\000\000\000\035\000\000\000\035\000\
\000\000\035\000\000\000\035\000\034\000\034\000\034\000\000\000\
\000\000\034\000\034\000\000\000\000\000\034\000\034\000\000\000\
\000\000\034\000\034\000\000\000\000\000\000\000\034\000\034\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\034\000\000\000\034\000\000\000\034\000\
\000\000\034\000\000\000\034\000\033\000\033\000\033\000\000\000\
\000\000\033\000\033\000\000\000\000\000\033\000\033\000\000\000\
\000\000\033\000\033\000\047\000\047\000\047\000\033\000\033\000\
\047\000\047\000\000\000\000\000\047\000\047\000\000\000\000\000\
\047\000\047\000\000\000\033\000\000\000\033\000\000\000\033\000\
\000\000\033\000\000\000\033\000\000\000\000\000\000\000\000\000\
\000\000\000\000\047\000\000\000\047\000\000\000\047\000\000\000\
\047\000\000\000\047\000\050\000\050\000\050\000\000\000\000\000\
\050\000\050\000\000\000\000\000\050\000\050\000\000\000\000\000\
\050\000\050\000\046\000\046\000\046\000\000\000\000\000\046\000\
\046\000\000\000\000\000\046\000\046\000\000\000\000\000\046\000\
\046\000\000\000\050\000\000\000\050\000\000\000\050\000\000\000\
\050\000\000\000\050\000\000\000\000\000\000\000\000\000\000\000\
\000\000\046\000\000\000\046\000\000\000\046\000\000\000\046\000\
\000\000\046\000\048\000\048\000\048\000\000\000\000\000\048\000\
\048\000\000\000\000\000\048\000\048\000\000\000\000\000\048\000\
\048\000\051\000\051\000\051\000\000\000\000\000\051\000\051\000\
\000\000\000\000\051\000\051\000\000\000\000\000\051\000\051\000\
\000\000\048\000\000\000\048\000\000\000\048\000\000\000\048\000\
\000\000\048\000\000\000\000\000\000\000\000\000\000\000\000\000\
\051\000\000\000\051\000\000\000\051\000\000\000\051\000\000\000\
\051\000\049\000\049\000\049\000\000\000\000\000\049\000\049\000\
\116\000\000\000\049\000\049\000\000\000\000\000\000\000\049\000\
\038\000\039\000\040\000\041\000\042\000\043\000\044\000\045\000\
\046\000\047\000\048\000\049\000\000\000\000\000\000\000\000\000\
\049\000\000\000\049\000\000\000\049\000\117\000\049\000\000\000\
\049\000\000\000\038\000\039\000\040\000\041\000\042\000\043\000\
\044\000\045\000\046\000\047\000\048\000\049\000\069\000\000\000\
\000\000\000\000\038\000\039\000\040\000\041\000\042\000\043\000\
\044\000\045\000\046\000\047\000\048\000\049\000\038\000\039\000\
\040\000\041\000\042\000\043\000\044\000\045\000\046\000\047\000\
\048\000\049\000\000\000\000\000\000\000\092\000\038\000\039\000\
\040\000\041\000\042\000\043\000\044\000\045\000\046\000\047\000\
\048\000\049\000\000\000\000\000\000\000\106\000\038\000\039\000\
\040\000\041\000\042\000\043\000\044\000\045\000\046\000\047\000\
\048\000\049\000"

let yycheck = "\007\001\
\000\000\019\001\001\001\033\001\019\001\027\001\001\000\007\001\
\037\001\001\000\039\001\041\001\033\001\008\000\009\000\010\000\
\011\000\032\001\040\001\018\001\041\001\036\001\040\001\034\001\
\033\001\036\001\033\001\038\001\001\001\037\001\037\001\039\001\
\041\001\001\001\029\000\034\001\019\001\037\001\001\001\039\001\
\000\000\028\001\029\001\038\000\039\000\040\000\041\000\042\000\
\043\000\044\000\045\000\046\000\047\000\048\000\049\000\050\000\
\027\001\052\000\002\001\003\001\004\001\037\001\001\001\001\001\
\008\001\001\001\006\001\062\000\027\001\002\001\003\001\004\001\
\067\000\068\000\069\000\008\001\071\000\038\001\073\000\039\001\
\000\000\007\001\002\001\003\001\004\001\001\001\001\001\001\001\
\008\001\006\001\019\001\005\001\040\001\001\001\089\000\009\001\
\010\001\001\001\041\001\013\001\014\001\033\001\037\001\017\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\109\000\001\001\030\001\112\000\027\001\000\000\
\000\000\116\000\117\000\007\001\038\001\002\001\003\001\004\001\
\042\001\043\001\037\001\008\001\037\001\002\001\003\001\004\001\
\007\001\007\001\133\000\008\001\037\001\033\001\137\000\028\001\
\029\001\030\001\031\001\142\000\062\000\093\000\091\000\121\000\
\136\000\148\000\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\255\255\011\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\041\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\011\001\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\255\255\255\255\255\255\255\255\
\255\255\037\001\255\255\039\001\255\255\255\255\255\255\255\255\
\000\000\255\255\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\255\255\255\255\
\255\255\255\255\002\001\003\001\004\001\039\001\255\255\007\001\
\008\001\255\255\255\255\011\001\012\001\255\255\255\255\015\001\
\016\001\255\255\255\255\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\000\000\035\001\255\255\037\001\255\255\039\001\
\255\255\041\001\002\001\003\001\004\001\255\255\255\255\007\001\
\008\001\255\255\255\255\011\001\012\001\255\255\255\255\015\001\
\016\001\255\255\255\255\255\255\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\255\255\033\001\000\000\035\001\255\255\037\001\255\255\039\001\
\255\255\041\001\002\001\003\001\004\001\255\255\255\255\007\001\
\008\001\255\255\255\255\011\001\012\001\255\255\255\255\015\001\
\016\001\255\255\255\255\255\255\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\255\255\030\001\031\001\
\255\255\033\001\000\000\035\001\255\255\037\001\255\255\039\001\
\255\255\041\001\002\001\003\001\004\001\255\255\255\255\007\001\
\008\001\255\255\255\255\011\001\012\001\255\255\255\255\015\001\
\016\001\255\255\255\255\255\255\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\255\255\030\001\031\001\
\255\255\033\001\000\000\035\001\255\255\037\001\255\255\039\001\
\255\255\041\001\002\001\003\001\004\001\255\255\255\255\007\001\
\008\001\255\255\255\255\011\001\012\001\255\255\255\255\015\001\
\016\001\255\255\255\255\255\255\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\255\255\030\001\031\001\
\255\255\033\001\000\000\035\001\255\255\037\001\255\255\039\001\
\255\255\041\001\002\001\003\001\004\001\255\255\255\255\007\001\
\008\001\255\255\255\255\011\001\012\001\255\255\255\255\015\001\
\016\001\255\255\255\255\255\255\020\001\021\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\033\001\000\000\035\001\255\255\037\001\255\255\039\001\
\255\255\041\001\002\001\003\001\004\001\255\255\255\255\007\001\
\008\001\000\000\255\255\011\001\012\001\255\255\255\255\015\001\
\016\001\255\255\255\255\255\255\020\001\021\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\033\001\255\255\035\001\255\255\037\001\255\255\039\001\
\255\255\041\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\000\000\255\255\255\255\002\001\003\001\004\001\255\255\
\255\255\007\001\008\001\255\255\255\255\011\001\012\001\255\255\
\000\000\015\001\016\001\255\255\255\255\255\255\020\001\021\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\033\001\255\255\035\001\255\255\037\001\
\255\255\039\001\255\255\041\001\002\001\003\001\004\001\255\255\
\255\255\007\001\008\001\255\255\255\255\011\001\012\001\255\255\
\000\000\015\001\016\001\255\255\255\255\255\255\020\001\021\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
\255\255\255\255\255\255\033\001\255\255\035\001\255\255\037\001\
\255\255\039\001\255\255\041\001\002\001\003\001\004\001\255\255\
\255\255\007\001\008\001\255\255\255\255\011\001\012\001\255\255\
\255\255\015\001\016\001\255\255\255\255\255\255\020\001\021\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
\255\255\255\255\255\255\033\001\255\255\035\001\255\255\037\001\
\255\255\039\001\255\255\041\001\002\001\003\001\004\001\255\255\
\255\255\007\001\008\001\255\255\255\255\011\001\012\001\255\255\
\255\255\015\001\016\001\255\255\255\255\255\255\020\001\021\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\033\001\255\255\035\001\255\255\037\001\
\255\255\039\001\255\255\041\001\002\001\003\001\004\001\255\255\
\255\255\007\001\008\001\255\255\255\255\011\001\012\001\255\255\
\255\255\015\001\016\001\255\255\255\255\255\255\020\001\021\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\033\001\255\255\035\001\255\255\037\001\
\255\255\039\001\255\255\041\001\002\001\003\001\004\001\255\255\
\255\255\007\001\008\001\255\255\255\255\011\001\012\001\255\255\
\255\255\015\001\016\001\002\001\003\001\004\001\020\001\021\001\
\007\001\008\001\255\255\255\255\011\001\012\001\255\255\255\255\
\015\001\016\001\255\255\033\001\255\255\035\001\255\255\037\001\
\255\255\039\001\255\255\041\001\255\255\255\255\255\255\255\255\
\255\255\255\255\033\001\255\255\035\001\255\255\037\001\255\255\
\039\001\255\255\041\001\002\001\003\001\004\001\255\255\255\255\
\007\001\008\001\255\255\255\255\011\001\012\001\255\255\255\255\
\015\001\016\001\002\001\003\001\004\001\255\255\255\255\007\001\
\008\001\255\255\255\255\011\001\012\001\255\255\255\255\015\001\
\016\001\255\255\033\001\255\255\035\001\255\255\037\001\255\255\
\039\001\255\255\041\001\255\255\255\255\255\255\255\255\255\255\
\255\255\033\001\255\255\035\001\255\255\037\001\255\255\039\001\
\255\255\041\001\002\001\003\001\004\001\255\255\255\255\007\001\
\008\001\255\255\255\255\011\001\012\001\255\255\255\255\015\001\
\016\001\002\001\003\001\004\001\255\255\255\255\007\001\008\001\
\255\255\255\255\011\001\012\001\255\255\255\255\015\001\016\001\
\255\255\033\001\255\255\035\001\255\255\037\001\255\255\039\001\
\255\255\041\001\255\255\255\255\255\255\255\255\255\255\255\255\
\033\001\255\255\035\001\255\255\037\001\255\255\039\001\255\255\
\041\001\002\001\003\001\004\001\255\255\255\255\007\001\008\001\
\012\001\255\255\011\001\012\001\255\255\255\255\255\255\016\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\255\255\255\255\255\255\255\255\
\033\001\255\255\035\001\255\255\037\001\015\001\039\001\255\255\
\041\001\255\255\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\016\001\255\255\
\255\255\255\255\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\255\255\255\255\255\255\035\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\255\255\255\255\255\255\035\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001"

let yynames_const = "\
  TYPE\000\
  VAR\000\
  FUNCTION\000\
  BREAK\000\
  OF\000\
  END\000\
  IN\000\
  NIL\000\
  LET\000\
  DO\000\
  TO\000\
  FOR\000\
  WHILE\000\
  ELSE\000\
  THEN\000\
  IF\000\
  ARRAY\000\
  ASSIGN\000\
  OR\000\
  AND\000\
  GE\000\
  GT\000\
  LE\000\
  LT\000\
  NEQ\000\
  EQ\000\
  DIVIDE\000\
  TIMES\000\
  MINUS\000\
  PLUS\000\
  DOT\000\
  RBRACE\000\
  LBRACE\000\
  RBRACK\000\
  LBRACK\000\
  RPAREN\000\
  LPAREN\000\
  SEMICOLON\000\
  COLON\000\
  COMMA\000\
  EOF\000\
  "

let yynames_block = "\
  ID\000\
  INT\000\
  STRING\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lvalue) in
    Obj.repr(
# 62 "parser.mly"
             ()
# 522 "parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 63 "parser.mly"
          ()
# 528 "parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Sequencing) in
    Obj.repr(
# 64 "parser.mly"
                 ()
# 535 "parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 65 "parser.mly"
          ()
# 542 "parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 66 "parser.mly"
             ()
# 549 "parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 67 "parser.mly"
                ()
# 556 "parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Funccall) in
    Obj.repr(
# 68 "parser.mly"
               ()
# 563 "parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'BinOpExp) in
    Obj.repr(
# 69 "parser.mly"
               ()
# 570 "parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'RecordCreation) in
    Obj.repr(
# 70 "parser.mly"
                     ()
# 577 "parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ArrayCreation) in
    Obj.repr(
# 71 "parser.mly"
                    ()
# 584 "parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Assignment) in
    Obj.repr(
# 72 "parser.mly"
                 ()
# 591 "parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'IfThenElse) in
    Obj.repr(
# 73 "parser.mly"
                 ()
# 598 "parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'IfThen) in
    Obj.repr(
# 74 "parser.mly"
             ()
# 605 "parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'While) in
    Obj.repr(
# 75 "parser.mly"
            ()
# 612 "parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'For) in
    Obj.repr(
# 76 "parser.mly"
          ()
# 619 "parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 77 "parser.mly"
            ()
# 625 "parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Let) in
    Obj.repr(
# 78 "parser.mly"
          ()
# 632 "parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'parenthesis) in
    Obj.repr(
# 79 "parser.mly"
                  ()
# 639 "parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 82 "parser.mly"
         ()
# 646 "parser.ml"
               : 'lvalue))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lvalue) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 83 "parser.mly"
                    ()
# 654 "parser.ml"
               : 'lvalue))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'lvalue) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : unit) in
    Obj.repr(
# 84 "parser.mly"
                               ()
# 662 "parser.ml"
               : 'lvalue))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expList) in
    Obj.repr(
# 87 "parser.mly"
                            ()
# 669 "parser.ml"
               : 'Sequencing))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expList) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 90 "parser.mly"
                            ()
# 677 "parser.ml"
               : 'expList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : unit) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 91 "parser.mly"
                        ()
# 685 "parser.ml"
               : 'expList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'parameters) in
    Obj.repr(
# 94 "parser.mly"
                                  (Printf.printf "funccall\n";)
# 693 "parser.ml"
               : 'Funccall))
; (fun __caml_parser_env ->
    Obj.repr(
# 97 "parser.mly"
      ()
# 699 "parser.ml"
               : 'parameters))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 98 "parser.mly"
          ()
# 706 "parser.ml"
               : 'parameters))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : unit) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'parameters) in
    Obj.repr(
# 99 "parser.mly"
                           ()
# 714 "parser.ml"
               : 'parameters))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : unit) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 102 "parser.mly"
                   ()
# 722 "parser.ml"
               : 'BinOpExp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : unit) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 103 "parser.mly"
                    ()
# 730 "parser.ml"
               : 'BinOpExp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : unit) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 104 "parser.mly"
                    ()
# 738 "parser.ml"
               : 'BinOpExp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : unit) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 105 "parser.mly"
                     ()
# 746 "parser.ml"
               : 'BinOpExp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : unit) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 106 "parser.mly"
                 (Printf.printf "EQQQ";;)
# 754 "parser.ml"
               : 'BinOpExp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : unit) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 107 "parser.mly"
                  ()
# 762 "parser.ml"
               : 'BinOpExp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : unit) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 108 "parser.mly"
                 ()
# 770 "parser.ml"
               : 'BinOpExp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : unit) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 109 "parser.mly"
                 ()
# 778 "parser.ml"
               : 'BinOpExp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : unit) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 110 "parser.mly"
                 ()
# 786 "parser.ml"
               : 'BinOpExp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : unit) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 111 "parser.mly"
                 ()
# 794 "parser.ml"
               : 'BinOpExp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : unit) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 112 "parser.mly"
                  ()
# 802 "parser.ml"
               : 'BinOpExp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : unit) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 113 "parser.mly"
                 ()
# 810 "parser.ml"
               : 'BinOpExp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'recordExpList) in
    Obj.repr(
# 116 "parser.mly"
                                     (Printf.printf "record creation\n";)
# 818 "parser.ml"
               : 'RecordCreation))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'recordExpField) in
    Obj.repr(
# 119 "parser.mly"
                     ()
# 825 "parser.ml"
               : 'recordExpList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'recordExpList) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'recordExpField) in
    Obj.repr(
# 120 "parser.mly"
                                         ()
# 833 "parser.ml"
               : 'recordExpList))
; (fun __caml_parser_env ->
    Obj.repr(
# 123 "parser.mly"
      ()
# 839 "parser.ml"
               : 'recordExpField))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 124 "parser.mly"
                ()
# 847 "parser.ml"
               : 'recordExpField))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : unit) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 127 "parser.mly"
                                  ()
# 856 "parser.ml"
               : 'ArrayCreation))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lvalue) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 130 "parser.mly"
                        ()
# 864 "parser.ml"
               : 'Assignment))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : unit) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : unit) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 133 "parser.mly"
                               ()
# 873 "parser.ml"
               : 'IfThenElse))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : unit) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 136 "parser.mly"
                      ()
# 881 "parser.ml"
               : 'IfThen))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : unit) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 139 "parser.mly"
                       ()
# 889 "parser.ml"
               : 'While))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : unit) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : unit) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 142 "parser.mly"
                                    ()
# 899 "parser.ml"
               : 'For))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'decs) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expseq) in
    Obj.repr(
# 145 "parser.mly"
                           ()
# 907 "parser.ml"
               : 'Let))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decs) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'dec) in
    Obj.repr(
# 148 "parser.mly"
             ()
# 915 "parser.ml"
               : 'decs))
; (fun __caml_parser_env ->
    Obj.repr(
# 149 "parser.mly"
     ()
# 921 "parser.ml"
               : 'decs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tydec) in
    Obj.repr(
# 152 "parser.mly"
          ()
# 928 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'vardec) in
    Obj.repr(
# 153 "parser.mly"
           ()
# 935 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fundec) in
    Obj.repr(
# 154 "parser.mly"
           ()
# 942 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'ty) in
    Obj.repr(
# 157 "parser.mly"
                  ()
# 950 "parser.ml"
               : 'tydec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 160 "parser.mly"
       ()
# 957 "parser.ml"
               : 'ty))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tyfields) in
    Obj.repr(
# 161 "parser.mly"
                           ()
# 964 "parser.ml"
               : 'ty))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 162 "parser.mly"
                ()
# 971 "parser.ml"
               : 'ty))
; (fun __caml_parser_env ->
    Obj.repr(
# 165 "parser.mly"
    ()
# 977 "parser.ml"
               : 'tyfields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tyfieldlist) in
    Obj.repr(
# 166 "parser.mly"
                ()
# 984 "parser.ml"
               : 'tyfields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tyfieldlist) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tyfield) in
    Obj.repr(
# 169 "parser.mly"
                              ()
# 992 "parser.ml"
               : 'tyfieldlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tyfield) in
    Obj.repr(
# 170 "parser.mly"
            ()
# 999 "parser.ml"
               : 'tyfieldlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 173 "parser.mly"
                ()
# 1007 "parser.ml"
               : 'tyfield))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 176 "parser.mly"
                      ()
# 1015 "parser.ml"
               : 'vardec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 177 "parser.mly"
                               ()
# 1024 "parser.ml"
               : 'vardec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'tyfields) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 180 "parser.mly"
                                              ()
# 1033 "parser.ml"
               : 'fundec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'tyfields) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 181 "parser.mly"
                                                       ()
# 1043 "parser.ml"
               : 'fundec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expList) in
    Obj.repr(
# 185 "parser.mly"
            ()
# 1050 "parser.ml"
               : 'expseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 186 "parser.mly"
        ()
# 1057 "parser.ml"
               : 'expseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 187 "parser.mly"
    ()
# 1063 "parser.ml"
               : 'expseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : unit) in
    Obj.repr(
# 190 "parser.mly"
                      ()
# 1070 "parser.ml"
               : 'parenthesis))
(* Entry exp *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let exp (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : unit)
