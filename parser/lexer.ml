# 1 "lexer.mll"
 
(*module E = ERRORMSG*)
open Token
open Stack
open Lexing

let string_buffer = Buffer.create 10

let escape c = 
  match c with
  | 'n' -> '\n'
  | 'r' -> '\r'
  | 'b' -> '\b'
  | 't' -> '\t'
  | _ -> c

# 19 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\226\255\078\000\228\255\229\255\231\255\232\255\233\255\
    \234\255\235\255\236\255\237\255\238\255\239\255\240\255\241\255\
    \243\255\002\000\031\000\249\255\250\255\033\000\054\000\088\000\
    \254\255\001\000\255\255\252\255\251\255\248\255\244\255\246\255\
    \145\000\252\255\146\000\177\000\255\255\254\255\171\000\251\255\
    \252\255\002\000\253\255\099\000\105\000\255\255\254\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\028\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\010\000\008\000\255\255\255\255\025\000\013\000\002\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\002\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\004\000\255\255\004\000\004\000\255\255\255\255";
  Lexing.lex_default = 
   "\255\255\000\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\255\255\000\000\000\000\255\255\255\255\255\255\
    \000\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \034\000\000\000\034\000\255\255\000\000\000\000\039\000\000\000\
    \000\000\255\255\000\000\255\255\255\255\000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\024\000\026\000\026\000\042\000\025\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \024\000\000\000\003\000\000\000\000\000\000\000\019\000\000\000\
    \008\000\009\000\015\000\013\000\004\000\014\000\012\000\022\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\021\000\005\000\017\000\016\000\018\000\031\000\
    \030\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\007\000\029\000\006\000\028\000\023\000\
    \027\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\010\000\020\000\011\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\046\000\045\000\000\000\000\000\000\000\000\000\
    \000\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\036\000\255\255\042\000\000\000\023\000\
    \041\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\037\000\000\000\043\000\000\000\000\000\
    \037\000\000\000\044\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\035\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\037\000\000\000\000\000\
    \000\000\000\000\000\000\037\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\037\000\
    \000\000\000\000\000\000\037\000\000\000\037\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\033\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\040\000\000\000\000\000\000\000\000\000\
    \000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\025\000\041\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\000\000\255\255\255\255\255\255\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\000\
    \017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\018\000\000\000\021\000\000\000\
    \022\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\043\000\044\000\255\255\255\255\255\255\255\255\
    \255\255\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\032\000\034\000\038\000\255\255\023\000\
    \038\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\035\000\255\255\038\000\255\255\255\255\
    \035\000\255\255\038\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\032\000\034\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\035\000\255\255\255\255\
    \255\255\255\255\255\255\035\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\035\000\
    \255\255\255\255\255\255\035\000\255\255\035\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\032\000\034\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\038\000\255\255\255\255\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 31 "lexer.mll"
            (
    (*incr lineNum;
    linePos := *)
    token lexbuf
  )
# 179 "lexer.ml"

  | 1 ->
# 36 "lexer.mll"
               (token lexbuf)
# 184 "lexer.ml"

  | 2 ->
let
# 37 "lexer.mll"
                  id
# 190 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 38 "lexer.mll"
      (
	match id with
	  | "type" -> Printf.printf "TYPE\n"; token lexbuf
	  | "var" -> Printf.printf "VAR\n"; token lexbuf
	  | "function" -> Printf.printf "FUNCTION\n"; token lexbuf
	  | "break" -> Printf.printf "BREAK\n"; token lexbuf
	  | "of" -> Printf.printf "OF\n"; token lexbuf
	  | "end" -> Printf.printf "END\n"; token lexbuf
	  | "in" -> Printf.printf "IN\n"; token lexbuf
	  | "nil" -> Printf.printf "NIL\n"; token lexbuf
	  | "let" -> Printf.printf "LET\n"; token lexbuf
	  | "do" -> Printf.printf "DO\n"; token lexbuf
	  | "to" -> Printf.printf "TO\n"; token lexbuf
	  | "for" -> Printf.printf "FOR\n"; token lexbuf
	  | "while" -> Printf.printf "WHILE\n"; token lexbuf
	  | "else" -> Printf.printf "ELSE\n"; token lexbuf
	  | "then" -> Printf.printf "THEN\n"; token lexbuf
	  | "if" -> Printf.printf "IF\n"; token lexbuf
	  | "array" -> Printf.printf "ARRAY\n"; token lexbuf
	  | _ -> Printf.printf "IDENTIFIER = %s\n" (Lexing.lexeme lexbuf); token lexbuf 
      )
# 214 "lexer.ml"

  | 3 ->
# 59 "lexer.mll"
         ( comment 0 lexbuf; token lexbuf )
# 219 "lexer.ml"

  | 4 ->
# 60 "lexer.mll"
         ( Printf.printf "ASSIGN\n"; token lexbuf )
# 224 "lexer.ml"

  | 5 ->
# 61 "lexer.mll"
        ( Printf.printf "OR\n"; token lexbuf )
# 229 "lexer.ml"

  | 6 ->
# 62 "lexer.mll"
        ( Printf.printf "AND\n"; token lexbuf )
# 234 "lexer.ml"

  | 7 ->
# 63 "lexer.mll"
         ( Printf.printf "GE\n"; token lexbuf )
# 239 "lexer.ml"

  | 8 ->
# 64 "lexer.mll"
        ( Printf.printf "GT\n"; token lexbuf )
# 244 "lexer.ml"

  | 9 ->
# 65 "lexer.mll"
         ( Printf.printf "LE\n"; token lexbuf )
# 249 "lexer.ml"

  | 10 ->
# 66 "lexer.mll"
        ( Printf.printf "LT\n"; token lexbuf )
# 254 "lexer.ml"

  | 11 ->
# 67 "lexer.mll"
         ( Printf.printf "NEQ\n"; token lexbuf )
# 259 "lexer.ml"

  | 12 ->
# 68 "lexer.mll"
        ( Printf.printf "EQ\n"; token lexbuf )
# 264 "lexer.ml"

  | 13 ->
# 69 "lexer.mll"
        ( Printf.printf "DIVIDE\n"; token lexbuf )
# 269 "lexer.ml"

  | 14 ->
# 70 "lexer.mll"
        ( Printf.printf "TIMES\n"; token lexbuf )
# 274 "lexer.ml"

  | 15 ->
# 71 "lexer.mll"
        ( Printf.printf "MINUS\n"; token lexbuf )
# 279 "lexer.ml"

  | 16 ->
# 72 "lexer.mll"
        ( Printf.printf "PLUS\n"; token lexbuf )
# 284 "lexer.ml"

  | 17 ->
# 73 "lexer.mll"
        ( Printf.printf "DOT\n"; token lexbuf )
# 289 "lexer.ml"

  | 18 ->
# 74 "lexer.mll"
        ( Printf.printf "RBRACE\n"; token lexbuf )
# 294 "lexer.ml"

  | 19 ->
# 75 "lexer.mll"
        ( Printf.printf "LBRACE\n"; token lexbuf )
# 299 "lexer.ml"

  | 20 ->
# 76 "lexer.mll"
        ( Printf.printf "RBRACK\n"; token lexbuf )
# 304 "lexer.ml"

  | 21 ->
# 77 "lexer.mll"
        ( Printf.printf "LBRACK\n"; token lexbuf )
# 309 "lexer.ml"

  | 22 ->
# 78 "lexer.mll"
        ( Printf.printf "RPAREN\n"; token lexbuf )
# 314 "lexer.ml"

  | 23 ->
# 79 "lexer.mll"
        ( Printf.printf "LPAREN\n"; token lexbuf )
# 319 "lexer.ml"

  | 24 ->
# 80 "lexer.mll"
        ( Printf.printf "SEMICOLON\n"; token lexbuf )
# 324 "lexer.ml"

  | 25 ->
# 81 "lexer.mll"
        ( Printf.printf "COLON\n"; token lexbuf )
# 329 "lexer.ml"

  | 26 ->
# 82 "lexer.mll"
        ( Printf.printf "COMMA\n"; token lexbuf )
# 334 "lexer.ml"

  | 27 ->
# 83 "lexer.mll"
         ( let s = string lexbuf in Printf.printf "STRING = %s\n" s; token lexbuf )
# 339 "lexer.ml"

  | 28 ->
# 85 "lexer.mll"
      (
	Printf.printf "integer literal = %s\n" (Lexing.lexeme lexbuf); token lexbuf
      )
# 346 "lexer.ml"

  | 29 ->
# 88 "lexer.mll"
        ( Printf.printf "EOF\n"; )
# 351 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and string lexbuf =
    __ocaml_lex_string_rec lexbuf 32
and __ocaml_lex_string_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 92 "lexer.mll"
      (
	let s = Buffer.contents string_buffer in
	Buffer.clear string_buffer;
	s
      )
# 366 "lexer.ml"

  | 1 ->
# 98 "lexer.mll"
      ( 
	Buffer.add_char string_buffer (escape (Lexing.lexeme_char lexbuf 1));
        string lexbuf 
      )
# 374 "lexer.ml"

  | 2 ->
# 103 "lexer.mll"
      ( 
	Buffer.add_string string_buffer (Lexing.lexeme lexbuf);
        string lexbuf 
      )
# 382 "lexer.ml"

  | 3 ->
# 107 "lexer.mll"
        (
    failwith
        (Printf.sprintf
           "unterminated string near characters %d-%d"
           (Lexing.lexeme_start lexbuf)
           (Lexing.lexeme_end lexbuf))
  )
# 393 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_string_rec lexbuf __ocaml_lex_state

and comment level lexbuf =
    __ocaml_lex_comment_rec level lexbuf 38
and __ocaml_lex_comment_rec level lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 117 "lexer.mll"
      (
	comment (level + 1) lexbuf
      )
# 406 "lexer.ml"

  | 1 ->
# 121 "lexer.mll"
      (
	if level = 0 then () else comment (level - 1) lexbuf
      )
# 413 "lexer.ml"

  | 2 ->
# 124 "lexer.mll"
            ( comment level lexbuf )
# 418 "lexer.ml"

  | 3 ->
# 125 "lexer.mll"
        ( failwith
        (Printf.sprintf
           "unterminated comment near characters %d-%d"
           (Lexing.lexeme_start lexbuf)
           (Lexing.lexeme_end lexbuf)) )
# 427 "lexer.ml"

  | 4 ->
# 130 "lexer.mll"
      ( comment level lexbuf )
# 432 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_comment_rec level lexbuf __ocaml_lex_state

;;

